Let, Const and Var:

    (i) var -> Variables can be re-declared & updated . A global scope variables.
    (functional variables or global variables)
    (var intialised)
    (re-declaration allowed)(fixed scoped or global scope)
    (re-assignment allow)

    (ii) Let -> Variables cannot be re-declared but can be updated. A block Scope variables.

    (block variables)
    (Let intialised)
    (re-declared not allowed)( it is block scoped)
    (re-assignment allow in let varibles)


    (iii) Const -> Variables cannot be re-declared or updated. A block scope variables.
    (const intialised)
    (re-declared not allowed)(block scoped)
    (re-assignment not allowed)

    == Variables ==
    Mutation = Var and Let
    Immutation = Const (who doesn-t change(constant))

//   => outer function variables are visible to inner function  but not the outer  way around  

  => Clouser ik asa functon hai jo apne parent function ka variables ko yaad rakhta hai even jab parent function execute ho chuka hota hai.

  or

//   => Closure: Remembers the variables form its outer (parent) function even after the parent function has finished executing.

 GEC=> (It is created automatically by the JS engine when you run a program.)
1. Global Execution Context (GEC) -> the area within all varibles, functions, closure, scope  access time, keywords literals where everything is defined is called GEC.
( vo area jiske ander sare variables, function, scope, access time, life time, keywords, litterals yeh sub define kiye jata hai )

2. Temporary Dead Zone =>  ase variables ki ik asi state hai  jab kisi variables ko initialize kiye bine usko access ke leta hai  uss time agr voh variables Var keyword declared hota hai baad me toh uss concept ko hum hosting bolta hai bahi aur  boh let ja Const variables declared hota hai baad me toh hume reference error milta hai.

// Temporary Dead Zone is a state where a variable exists but cannot be accessed until it is initialized.
// If the variable is declared using the **var** keyword, and you try to access it before its declaration, JavaScript allows it (but the value will be undefined). This behavior is due to hoisting.
// However, if the variable is declared using **let** or **const**, and you try to access it before its declaration, JavaScript will throw a ReferenceError.

// console.log(a); // reference error // temporary dead zone
// let a= 4; 

(identifier A cannot be access before its inilizations).

3. Scope => JavaScript me 2 trike ka  scope hota hai (Two types of Scope in JavaScript)
Global and Local scope 

i) Global scope ko vanilla JS me window object bolta hai  aur node js me System object bolta hai.

Function Scope => Functin scope ka ander bna variables sirf usi function tak hi access ke skta hai aur function accessibility area ko stack kheta hai.

ii) Block Scope => Let and Const se declared kiye jana walla variables ko Block scope bolta hai .
block Scope ka ana ka karan Var keywords se declared kiye jana walla variables global scope se function scope me change ho jate hai.    

1. What is Scope in JavaScript?
Scope is the area or context where variables are accessible or visible in your code.

üí° In simple terms: Where can you use a variable? That‚Äôs its scope.
             
Types of Scope in JavaScript:

1. Global Scope

Variables declared outside any function or block.
Accessible anywhere in your code.

// let name = "Rahul";

// function greet() {
//   console.log(name); // ‚úÖ Accessible
// }
// greet();
// console.log(name);   // ‚úÖ Accessible

2. Function Scope (Local Scope)

Variables declared inside a function.
Accessible only inside that function.

// function test() {
//   let x = 10;
//   console.log(x); // ‚úÖ Accessible here
// }
// test();
// console.log(x); // ‚ùå Error: x is not defined

3. Block Scope (ES6)
Variables declared with let or const inside {} (block) are limited to that block.

// {
//   let a = 5;
//   const b = 10;
//   console.log(a, b); // ‚úÖ Accessible here
// }
// console.log(a); // ‚ùå Error
// console.log(b); // ‚ùå Error

var is not block-scoped, it is function-scoped:
// {
//   var x = 100;
// }
// console.log(x); // ‚úÖ 100 (because `var` ignores block)


// lexical scope 



// variable : agar function scope me bna variables global execution me bna variables ka sath match karte hai toh global execution ko varibles ko shadow ho jata hai , toh uss concept ko variables shadow kheta hai



// lambda function not return object 

agr object return krna hai to hum {} usa arow function bolta hai and hum tab return krna hoga 